#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const argv = require('minimist')(process.argv.slice(2));
const mkdirp = require('mkdirp-promise');
const statiq = require('../lib/statiq');

let cwd = process.cwd();

function help() {
  console.info(
`Statiq - static website generator.

Usage:
  statiq                  build website

  statiq init [options]   bootstrap website
    Options:
      -s                  create statiqfile only

  statiq add <filename>   create website document, key-value pairs
    [--<key>=<value>...]  are added to document context

  statiq help             show this because`
  );
}

function lookup() {
  // statiqfile lookup
  while (cwd !== '/') {
    const filepath = path.join(cwd, 'statiqfile');

    if (fs.existsSync(filepath + '.js')) {
      require(filepath + '.js')(statiq);
      break;
    } else {
      cwd = path.dirname(cwd);
    }
  }

  if (cwd === '/') {
    console.warn('No statiqfile.js found');
    return;
  }

  // If no cwd was setup, use statiqfile's dir
  if (!statiq._config.cwd) {
    statiq.config({ cwd });
  }
}

function init() {
  Promise.all((argv.s ? [] : [
    mkdirp(path.join(process.cwd(), 'content')).then(() => {
      return '\u2713 created content/';
    }),
    mkdirp(path.join(process.cwd(), 'templates')).then(() => {
      return '\u2713 created templates/';
    }),
    mkdirp(path.join(process.cwd(), 'publish')).then(() => {
      return '\u2713 created publish/';
    }),
    mkdirp(path.join(process.cwd(), 'assets')).then(() => {
      return '\u2713 created assets/';
    }),
    new Promise((resolve, reject) => {
      fs.readFile(path.join(__dirname, '..', 'lib', 'package.json'), (err, data) => {
        if (err) return reject(err);
        fs.writeFile(path.join(process.cwd(), 'package.json'), data, err => {
          if (err) return reject(err);
          resolve('\u2713 created package.json');
        });
      });
    })
  ]).concat(
    new Promise((resolve, reject) => {
      fs.readFile(path.join(__dirname, '..', 'lib', 'statiqfile.js'), (err, data) => {
        if (err) return reject(err);
        fs.writeFile(path.join(process.cwd(), 'statiqfile.js'), data, err => {
          if (err) return reject(err);
          resolve('\u2713 created statiqfile.js');
        });
      });
    }),
  )).then(messages => {
    messages.forEach(msg => console.info(msg));

    if (!argv.s) {
      console.info('');
      console.info('  install dependencies:')
      console.info('    $ npm install')
    }
  });
}

function add() {
  if (argv._[1]) {
    const filepath = argv._[1];

    delete argv._;

    statiq
      .create(filepath, Object.keys(argv).length ? argv : null)
      .then(target => console.info('\u2713', target, 'created'))
      .catch(err => console.warn('\u2717', err.toString()));
  }
}

function build() {
  const time = Date.now();

  statiq
    .copy()
    .then(() => console.info('\u2713 Assets copied'))
    .then(() => statiq.scan())
    .then(index => Promise.all(Object.keys(index).map(f => statiq.build(f)
      .then(target => argv.s || console.info('\u2713 ' + target))
      .catch(err => argv.s || console.warn('\u2717 ' + f + '\n' + err.toString()))
    )))
    .then(() => console.info('Finished in', Date.now() - time, 'ms'))
    .catch(err => console.error('\u2717 ' + err.toString()));
}

// No args, lookup for statiqfile and parse
if (!argv._.length) {
  lookup();
  build();
// Else check commands
} else switch(argv._[0]) {
  case 'help':
    return help();

  case 'init':
    if (argv.d) lookup();
    return init();

  case 'add':
    lookup();
    return add();

  default:
    return console.log('Unknown command', argv._[0]);
}
