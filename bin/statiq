#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const http = require('http');
const util = require('util');
const argv = require('minimist')(process.argv.slice(2));
const mkdirp = require('mkdirp-promise');
const serveHandler = require('serve-handler');
const statiq = require('../lib/statiq')();
const watcher = require('node-watch');

const readFile = util.promisify(fs.readFile);
const writeFile = util.promisify(fs.writeFile);

let cwd = process.cwd();

function help() {
  console.info(
`Statiq - static website generator.

Usage:
  statiq                  build website

  statiq init [options]   bootstrap website
    Options:
      -s                  create statiqfile only

  statiq add <filename>   create website document, key-value pairs
    [--<key>=<value>...]  are added to document context

  statiq serve [options]  start local server
    Options:
      -w, --watch         also start watcher
      -p, --port          port to listen to

  statiq watch            start watcher and rebuild website when
                          changes occur

  statiq help             show this because`
  );
}

function lookup() {
  // statiqfile lookup
  while (cwd !== '/') {
    const filepath = path.join(cwd, 'statiqfile.js');

    if (fs.existsSync(filepath)) {
      statiq.config({ cwd });
      require(filepath)(statiq);
      break;
    } else {
      cwd = path.dirname(cwd);
    }
  }

  if (cwd === '/') {
    console.warn('No statiqfile.js found');
    return;
  }
}

async function init() {
  if (argv.s) {
    await Promise.all([
      mkdirp(path.join(process.cwd(), 'content')).then(() => {
        console.info('\u2713 created content/');
      }),
      mkdirp(path.join(process.cwd(), 'templates')).then(() => {
        console.info('\u2713 created templates/');
      }),
      mkdirp(path.join(process.cwd(), 'publish')).then(() => {
        console.info('\u2713 created publish/');
      }),
      mkdirp(path.join(process.cwd(), 'assets')).then(() => {
        console.info('\u2713 created assets/');
      }),
    ]);

    const pkg = await readFile(path.join(__dirname, '..', 'lib', 'package.json'));
    await writeFile(path.join(process.cwd(), 'package.json'), pkg);

    console.info('\u2713 created package.json');
  }

  const statiqfile = await readFile(path.join(__dirname, '..', 'lib', 'statiqfile.js'));
  await writeFile(path.join(process.cwd(), 'statiqfile.js'), statiqfile);

  console.info('\u2713 created statiqfile.js');

  if (!argv.s) {
    console.info('');
    console.info('  install dependencies:');
    console.info('    $ npm install');
  }
}

function add() {
  if (!argv._[1]) return;

  const filepath = argv._[1];

  delete argv._;

  statiq
    .create(filepath, Object.keys(argv).length ? argv : null, '')
    .then(() => console.info('\u2713', filepath, 'created'))
    .catch(err => console.warn('\u2717', err.toString()));
}

async function build() {
  const time = Date.now();
  console.log();

  try {
    await statiq.scan();
    await statiq.buildAll();
    (await statiq.writeAll()).map(path => argv.s || console.info('\u2713 ' + path));
    await statiq.handleAssets()
    console.info('\u2713 Assets copied');
  } catch (err) {
    console.error('\u2717 ' + err.toString());
  }

  console.info('\nFinished in', Date.now() - time, 'ms');
}

function serve() {
  const server = http.createServer((req, res) => {
    const { cwd, publishPath } = statiq.config();

    return serveHandler(req, res, {
      public: path.join(cwd, publishPath),
    });
  });

  const port = argv.p || argv.port || 3000;

  server.listen(port, () => {
    console.log(`Running at http://localhost:${port}`);

    if (argv.w || argv.watch) watch();
  });
}

function watch() {
  const { cwd, contentPath, templatesPath, assetsPath } = statiq.config();

  watcher([
    path.join(cwd, contentPath),
    path.join(cwd, templatesPath),
    path.join(cwd, assetsPath),
  ], { recursive: true }, build);

  console.log('Waiting for changes...');
}

// No args, lookup for statiqfile and parse
if (!argv._.length) {
  lookup();
  build();
// Else check commands
} else switch(argv._[0]) {
  case 'help':
    return help();

  case 'init':
    if (argv.d) lookup();
    return init();

  case 'add':
    lookup();
    return add();

  case 'serve':
    lookup();
    return serve();

  case 'watch':
    lookup();
    return watch();

  default:
    return console.log('Unknown command', argv._[0]);
}
