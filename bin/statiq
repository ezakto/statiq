#!/usr/bin/env node

var fs     = require('fs'),
    path   = require('path'),
    argv   = require('minimist')(process.argv.slice(2)),
    mkdirp = require('mkdirp'),
    statiq = require('../lib/statiq'),
    cwd    = process.cwd();

function lookup() {
    var statiqfile = false;
    while (!statiqfile && cwd != '/') {
        if (fs.existsSync(path.join(cwd, 'statiqfile.js'))) {
            statiqfile = require(path.join(cwd, 'statiqfile.js'));
        } else {
            cwd = path.dirname(cwd);
        }
    }
    return statiqfile;
}

function cli() {
    // No args, lookup for statiqfile and parse
    if (!argv._.length) {
        lookup()(statiq);
        if(!statiq._config.cwd) {
            statiq.config({ cwd: cwd });
        }
        statiq.index();
        statiq.parse();
    // Else check commands
    } else switch(argv._[0]) {
        case 'init':
            if (!argv.d || argv.a) {
                fs.writeFileSync(path.join(process.cwd(), 'statiqfile.js'), fs.readFileSync(path.join(__dirname, '..', 'lib', 'statiqfile.js.src')));
                fs.writeFileSync(path.join(process.cwd(), 'package.json'), fs.readFileSync(path.join(__dirname, '..', 'lib', 'package.json.src')));
                console.log('\u2713 package.json & statiqfile created. Run "npm install ." to download dependencies.');
            }

            if (argv.d || argv.a) {
                var json = lookup(statiq);
                mkdirp(path.join(json.cwd, json.srcPath), function(err){
                    !err && console.log('\u2713 Sources directory created');
                });
                mkdirp(path.join(json.cwd, json.tplPath), function(err){
                    !err && console.log('\u2713 Templates directory created');
                });
                mkdirp(path.join(json.cwd, json.dstPath), function(err){
                    !err && console.log('\u2713 Dist directory created');
                });
            }
            break;
    }
}

cli();