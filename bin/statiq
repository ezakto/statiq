#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const yaml = require('js-yaml');
const argv = require('minimist')(process.argv.slice(2));
const mkdirp = require('mkdirp');
const statiq = require('../lib/statiq');

function cli() {
  let cwd = process.cwd();

  // statiqfile lookup
  while (cwd !== '/') {
    const filepath = path.join(cwd, 'statiqfile');

    if (fs.existsSync(filepath + '.js')) {
      require(filepath + '.js')(statiq);
      break;
    } else {
      cwd = path.dirname(cwd);
    }
  }

  if (cwd === '/') {
    console.warn('No statiqfile.js found');
    return;
  }

  // If no cwd was setup, use statiqfile's dir
  if (!statiq._config.cwd) {
    statiq.config({ cwd });
  }

  const config = statiq._config;

  // No args, lookup for statiqfile and parse
  if (!argv._.length) {
    const time = Date.now();
    statiq
      .copy()
      .then(() => console.info('\u2713 Assets copied'))
      .then(() => statiq.scan())
      .then(index => Promise.all(Object.keys(index).map(f => statiq.build(f)
        .then(target => argv.s || console.info('\u2713 ' + target))
        .catch(err => argv.s || console.warn('\u2717 ' + f + '\n' + err.toString()))
      )))
      .then(() => console.info('Finished in', Date.now() - time, 'ms'))
      .catch(err => console.error('\u2717 ' + err.toString()));

  // Else check commands
  } else switch(argv._[0]) {
    case 'init':
      if (!argv.d || argv.a) {
        fs.writeFileSync(path.join(process.cwd(), 'statiqfile.js'), fs.readFileSync(path.join(__dirname, '..', 'lib', 'statiqfile.js')));
        console.info('\u2713 Example statiqfile.js created');
      }

      if (argv.d || argv.a) {
        mkdirp(path.join(config.cwd, config.paths.content), err => {
          if (err) return console.error(err);
          console.info('\u2713 Content directory created');
        });

        mkdirp(path.join(config.cwd, config.paths.templates), err => {
          if (err) return console.error(err);
          console.info('\u2713 Templates directory created');
        });

        mkdirp(path.join(config.cwd, config.paths.publish), err => {
          if (err) return console.error(err);
          console.info('\u2713 Publish directory created');
        });

        mkdirp(path.join(config.cwd, config.paths.assets), err => {
          if (err) return console.error(err);
          console.info('\u2713 Assets directory created');
        });
      }
      break;

    case 'add':
      if (argv._[1]) {
        const filepath = argv._[1];

        delete argv._;

        statiq
          .create(filepath, Object.keys(argv).length ? argv : null)
          .then(target => console.info('\u2713', target, 'created'))
          .catch(err => console.warn('\u2717', err.toString()));
      }
      break;
  }
}

cli();
