#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const http = require('http');
const argv = require('minimist')(process.argv.slice(2));
const serveHandler = require('serve-handler');
const watcher = require('node-watch');
const statiq = require('../lib/statiq')();
const init = require('../lib/init');

const { log, warn, error } = console;

function help() {
  log(`Statiq - static website generator.

Usage:
  statiq                  build website

  statiq init             bootstrap website

  statiq add <filename>   create website document, key-value pairs
    [--<key>=<value>...]  are added to document context

  statiq serve [options]  start local server
    Options:
      -w, --watch         also start watcher
      -p, --port          port to listen to

  statiq watch            start watcher and rebuild website when
                          changes occur

  statiq help             show this because`);
}

function lookup() {
  let cwd = process.cwd();

  while (cwd !== '/') {
    const filepath = path.join(cwd, 'statiqfile.js');

    if (fs.existsSync(filepath)) {
      statiq.config({ cwd });
      // eslint-disable-next-line global-require, import/no-dynamic-require
      require(filepath)(statiq);
      break;
    } else {
      cwd = path.dirname(cwd);
    }
  }

  if (cwd === '/') {
    warn('No statiqfile.js found');
  }
}

function add() {
  if (!argv._[1]) return;

  const filepath = argv._[1];

  delete argv._;

  lookup();

  statiq
    .create(filepath, Object.keys(argv).length ? argv : null, '')
    .then(() => log('\u2713', filepath, 'created'))
    .catch(err => error('\u2717', err));
}

async function build() {
  const time = Date.now();
  log();

  try {
    lookup();

    await statiq.readAll();
    await statiq.buildAll();
    (await statiq.writeAll()).map(p => argv.s || log(`\u2713 ${p}`));
    await statiq.handleAssets();
    log('\u2713 Assets copied');
  } catch (err) {
    error('\u2717', err);
  }

  log('\nFinished in', Date.now() - time, 'ms');
}

function watch() {
  lookup();

  const { cwd, contentPath, templatesPath, assetsPath } = statiq.config();

  watcher([
    path.join(cwd, contentPath),
    path.join(cwd, templatesPath),
    path.join(cwd, assetsPath),
  ], { recursive: true }, build);

  log('Waiting for changes...');
}

function serve() {
  lookup();

  const server = http.createServer((req, res) => {
    const { cwd, publishPath } = statiq.config();

    return serveHandler(req, res, {
      public: path.join(cwd, publishPath),
    });
  });

  const port = argv.p || argv.port || 3000;

  server.listen(port, () => {
    log(`Running at http://localhost:${port}`);

    if (argv.w || argv.watch) watch();
  });
}

// No args, lookup for statiqfile and parse
if (!argv._.length) {
  return build();
}

// Or check commands
switch (argv._[0]) {
  case 'help':
    return help();

  case 'init':
    return init();

  case 'add':
    return add();

  case 'serve':
    return serve();

  case 'watch':
    return watch();

  default:
    return log('Unknown command', argv._[0]);
}
